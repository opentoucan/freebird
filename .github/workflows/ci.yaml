name: ci

on:
  workflow_dispatch:
  push:
    branches: ["main", "+([0-9])?(.{+([0-9]),x}).x"]
    paths-ignore:
      - 'docs/**'
      - '**.md'

env:
  REGISTRY: ghcr.io

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install required dependencies
        run: |
          sudo apt update
          sudo apt install -y sudo
          sudo apt install -y git curl
          curl -sL https://deb.nodesource.com/setup_20.x | sudo -E bash -
          sudo DEBIAN_FRONTEND=noninteractive apt install -y nodejs
      - name: Print versions
        run: |
          git --version
          node --version
          npm --version
          npx commitlint --version
      - name: Install commitlint
        run: |
          npm install @commitlint/cli @commitlint/config-conventional --save-dev

      - name: Validate current commit (last commit) with commitlint
        if: github.event_name == 'push'
        run: npx commitlint --last --verbose

      - name: Validate PR commits with commitlint
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
      - uses: dtolnay/rust-toolchain@stable
      - run: |
          cargo test --all-features

  formatting:
    name: cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1

  get-next-version:
    uses: semantic-release-action/next-release-version/.github/workflows/next-release-version.yml@v4

  release:
    runs-on: ubuntu-latest
    if: github.repository == 'opentoucan/freebird'
    needs:
      - get-next-version
    permissions:
      contents: write
    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
      git_tag: ${{ steps.semantic-release.outputs.new_release_git_tag }}
      major: ${{ steps.semantic-release.outputs.new_release_major_version }}
      minor: ${{ steps.semantic-release.outputs.new_release_minor_version }}
      patch: ${{ steps.semantic-release.outputs.new_release_patch_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21.6'

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          mise_toml: |
            [tools]
            "aqua:TomWright/dasel" = "latest"

      - uses: dtolnay/rust-toolchain@stable
      - run: |
          cargo check

      - name: Bump Cargo package version
        run: |
          dasel put -r toml -f Cargo.toml -t string -v "${{ needs.get-next-version.outputs.new-release-version }}" 'package.version'

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic-release
        with:
          extra_plugins: |
            @semantic-release/commit-analyzer@13.0.1
            @semantic-release/release-notes-generator@14.0.3
            @semantic-release/github@11.0.1
            @semantic-release/git@10.0.1
          semantic_version: 24.2.1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
  docker-build:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.new_release_published == 'true' }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/freebird
          tags: |
            type=raw,value=${{ needs.release.outputs.new_release_version }}
            type=raw,value=latest

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # If it's a major or minor version change then cut a branch from the new tag
      - name: Branch from tag
        if: ${{ needs.release.outputs.patch }} == 0
        run: |
          git config --global push.autoSetupRemote true
          git checkout -b ${{ needs.release.outputs.major }}.${{ needs.release.outputs.minor }}.x ${{ needs.release.outputs.git_tag }}
          git push
